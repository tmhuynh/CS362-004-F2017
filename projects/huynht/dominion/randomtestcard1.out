Running Random Smithy Test

1000 Tests Complete

1000 failures and 0 successful cases of Smithy.
File 'dominion.c'
Lines executed:25.19% of 651
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int compare(const void* a, const void* b) {
    20261:    9:	if (*(int*)a > *(int*)b)
      990:   10:		return 1;
    19271:   11:	if (*(int*)a < *(int*)b)
     6749:   12:		return -1;
    12522:   13:	return 0;
    20261:   14:}
        -:   15:
        -:   16:struct gameState* newGame() {
    #####:   17:	struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:	return g;
        -:   19:}
        -:   20:
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		int k8, int k9, int k10) {
    #####:   23:	int* k = malloc(10 * sizeof(int));
    #####:   24:	k[0] = k1;
    #####:   25:	k[1] = k2;
    #####:   26:	k[2] = k3;
    #####:   27:	k[3] = k4;
    #####:   28:	k[4] = k5;
    #####:   29:	k[5] = k6;
    #####:   30:	k[6] = k7;
    #####:   31:	k[7] = k8;
    #####:   32:	k[8] = k9;
    #####:   33:	k[9] = k10;
    #####:   34:	return k;
        -:   35:}
        -:   36:
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		struct gameState *state) {
        -:   39:
        -:   40:	int i;
        -:   41:	int j;
        -:   42:	int it;			
        -:   43:	//set up random number generator
     1000:   44:	SelectStream(1);
     1000:   45:	PutSeed((long)randomSeed);
        -:   46:
        -:   47:	//check number of players
     2000:   48:	if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:	{
      518:   50:		return -1;
        -:   51:	}
        -:   52:
        -:   53:	//set number of players
      482:   54:	state->numPlayers = numPlayers;
        -:   55:
        -:   56:	//check selected kingdom cards are different
    10604:   57:	for (i = 0; i < 10; i++)
        -:   58:	{
   106040:   59:		for (j = 0; j < 10; j++)
        -:   60:		{
    91580:   61:			if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:			{
    #####:   63:				return -1;
        -:   64:			}
    48200:   65:		}
     4820:   66:	}
        -:   67:
        -:   68:
        -:   69:	//initialize supply
        -:   70:	///////////////////////////////
        -:   71:
        -:   72:	//set number of Curse cards
      482:   73:	if (numPlayers == 2)
        -:   74:	{
      231:   75:		state->supplyCount[curse] = 10;
      231:   76:	}
      251:   77:	else if (numPlayers == 3)
        -:   78:	{
      251:   79:		state->supplyCount[curse] = 20;
      251:   80:	}
        -:   81:	else
        -:   82:	{
    #####:   83:		state->supplyCount[curse] = 30;
        -:   84:	}
        -:   85:
        -:   86:	//set number of Victory cards
      482:   87:	if (numPlayers == 2)
        -:   88:	{
      231:   89:		state->supplyCount[estate] = 8;
      231:   90:		state->supplyCount[duchy] = 8;
      231:   91:		state->supplyCount[province] = 8;
      231:   92:	}
        -:   93:	else
        -:   94:	{
      251:   95:		state->supplyCount[estate] = 12;
      251:   96:		state->supplyCount[duchy] = 12;
      251:   97:		state->supplyCount[province] = 12;
        -:   98:	}
        -:   99:
        -:  100:	//set number of Treasure cards
      482:  101:	state->supplyCount[copper] = 60 - (7 * numPlayers);
      482:  102:	state->supplyCount[silver] = 40;
      482:  103:	state->supplyCount[gold] = 30;
        -:  104:
        -:  105:	//set number of Kingdom cards
    20244:  106:	for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:	{
   159060:  108:		for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:		{
    74710:  110:			if (kingdomCards[j] == i)
        -:  111:			{
        -:  112:				//check if card is a 'Victory' Kingdom card
     9640:  113:				if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:				{
      482:  115:					if (numPlayers == 2){ 
      231:  116:						state->supplyCount[i] = 8; 
      231:  117:					}
      251:  118:					else{ state->supplyCount[i] = 12; }
      482:  119:				}
        -:  120:				else
        -:  121:				{
     4338:  122:					state->supplyCount[i] = 10;
        -:  123:				}
     4820:  124:				break;
        -:  125:			}
        -:  126:			else    //card is not in the set choosen for the game
        -:  127:			{
    69890:  128:				state->supplyCount[i] = -1;
        -:  129:			}
    69890:  130:		}
        -:  131:
     9640:  132:	}
        -:  133:
        -:  134:	////////////////////////
        -:  135:	//supply intilization complete
        -:  136:
        -:  137:	//set player decks
     3394:  138:	for (i = 0; i < numPlayers; i++)
        -:  139:	{
     1215:  140:		state->deckCount[i] = 0;
     9720:  141:		for (j = 0; j < 3; j++)
        -:  142:		{
     3645:  143:			state->deck[i][j] = estate;
     3645:  144:			state->deckCount[i]++;
     3645:  145:		}
    19440:  146:		for (j = 3; j < 10; j++)
        -:  147:		{
     8505:  148:			state->deck[i][j] = copper;
     8505:  149:			state->deckCount[i]++;		
     8505:  150:		}
     1215:  151:	}
        -:  152:
        -:  153:	//shuffle player decks
     3394:  154:	for (i = 0; i < numPlayers; i++)
        -:  155:	{
     1215:  156:		if ( shuffle(i, state) < 0 )
        -:  157:		{
    #####:  158:			return -1;
        -:  159:		}
     1215:  160:	}
        -:  161:
        -:  162:	//draw player hands
     3394:  163:	for (i = 0; i < numPlayers; i++)
        -:  164:	{  
        -:  165:		//initialize hand size to zero
     1215:  166:		state->handCount[i] = 0;
     1215:  167:		state->discardCount[i] = 0;
        -:  168:		//draw 5 cards
        -:  169:		// for (j = 0; j < 5; j++)
        -:  170:		//	{
        -:  171:		//	  drawCard(i, state);
        -:  172:		//	}
     1215:  173:	}
        -:  174:
        -:  175:	//set embargo tokens to 0 for all supply piles
    26992:  176:	for (i = 0; i <= treasure_map; i++)
        -:  177:	{
    13014:  178:		state->embargoTokens[i] = 0;
    13014:  179:	}
        -:  180:
        -:  181:	//initialize first player's turn
      482:  182:	state->outpostPlayed = 0;
      482:  183:	state->phase = 0;
      482:  184:	state->numActions = 1;
      482:  185:	state->numBuys = 1;
      482:  186:	state->playedCardCount = 0;
      482:  187:	state->whoseTurn = 0;
      482:  188:	state->handCount[state->whoseTurn] = 0;
        -:  189:	//int it; move to top
        -:  190:
        -:  191:	//Moved draw cards to here, only drawing at the start of a turn
     5784:  192:	for (it = 0; it < 5; it++){
     2410:  193:		drawCard(state->whoseTurn, state);
     2410:  194:	}
        -:  195:
      482:  196:	updateCoins(state->whoseTurn, state, 0);
        -:  197:
      482:  198:	return 0;
     1000:  199:}
        -:  200:
        -:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:	int newDeck[MAX_DECK];
     1892:  205:	int newDeckPos = 0;
        -:  206:	int card;
        -:  207:	int i;
        -:  208:
     1892:  209:	if (state->deckCount[player] < 1)
      671:  210:		return -1;
     1221:  211:	qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:	/* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
    30130:  214:	while (state->deckCount[player] > 0) {
    13844:  215:		card = floor(Random() * state->deckCount[player]);
    13844:  216:		newDeck[newDeckPos] = state->deck[player][card];
    13844:  217:		newDeckPos++;
   396196:  218:		for (i = card; i < state->deckCount[player]-1; i++) {
   184254:  219:			state->deck[player][i] = state->deck[player][i+1];
   184254:  220:		}
    13844:  221:		state->deckCount[player]--;
        -:  222:	}
    30130:  223:	for (i = 0; i < newDeckPos; i++) {
    13844:  224:		state->deck[player][i] = newDeck[i];
    13844:  225:		state->deckCount[player]++;
    13844:  226:	}
        -:  227:
     1221:  228:	return 0;
     1892:  229:}
        -:  230:
        -:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:	int card;
    #####:  234:	int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:	//check if it is the right phase
    #####:  237:	if (state->phase != 0)
        -:  238:	{
    #####:  239:		return -1;
        -:  240:	}
        -:  241:
        -:  242:	//check if player has enough actions
    #####:  243:	if ( state->numActions < 1 )
        -:  244:	{
    #####:  245:		return -1;
        -:  246:	}
        -:  247:
        -:  248:	//get card played
    #####:  249:	card = handCard(handPos, state);
        -:  250:
        -:  251:	//check if selected card is an action
    #####:  252:	if ( card < adventurer || card > treasure_map )
        -:  253:	{
    #####:  254:		return -1;
        -:  255:	}
        -:  256:
        -:  257:	//play card
    #####:  258:	if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:	{
    #####:  260:		return -1;
        -:  261:	}
        -:  262:
        -:  263:	//reduce number of actions
    #####:  264:	state->numActions--;
        -:  265:
        -:  266:	//update coins (Treasure cards may be added with card draws)
    #####:  267:	updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:
    #####:  269:	return 0;
    #####:  270:}
        -:  271:
        -:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:	int who;
        -:  274:	if (DEBUG){
        -:  275:		printf("Entering buyCard...\n");
        -:  276:	}
        -:  277:
        -:  278:	// I don't know what to do about the phase thing.
        -:  279:
    #####:  280:	who = state->whoseTurn;
        -:  281:
    #####:  282:	if (state->numBuys < 1){
        -:  283:		if (DEBUG)
        -:  284:			printf("You do not have any buys left\n");
    #####:  285:		return -1;
    #####:  286:	} else if (supplyCount(supplyPos, state) <1){
        -:  287:		if (DEBUG)
        -:  288:			printf("There are not any of that type of card left\n");
    #####:  289:		return -1;
    #####:  290:	} else if (state->coins < getCost(supplyPos)){
        -:  291:		if (DEBUG) 
        -:  292:			printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:		return -1;
        -:  294:	} else {
    #####:  295:		state->phase=1;
        -:  296:		//state->supplyCount[supplyPos]--;
    #####:  297:		gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:
    #####:  299:		state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:		state->numBuys--;
        -:  301:		if (DEBUG)
        -:  302:			printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:	}
        -:  304:
        -:  305:	//state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:	//state->discardCount[who]++;
        -:  307:
    #####:  308:	return 0;
    #####:  309:}
        -:  310:
        -:  311:int numHandCards(struct gameState *state) {
    #####:  312:	return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
        -:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:	int currentPlayer = whoseTurn(state);
    #####:  317:	return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
        -:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:	return state->supplyCount[card];
        -:  322:}
        -:  323:
        -:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:	int i;
    #####:  326:	int count = 0;
        -:  327:
    #####:  328:	for (i = 0; i < state->deckCount[player]; i++)
        -:  329:	{
    #####:  330:		if (state->deck[player][i] == card) count++;
    #####:  331:	}
        -:  332:
    #####:  333:	for (i = 0; i < state->handCount[player]; i++)
        -:  334:	{
    #####:  335:		if (state->hand[player][i] == card) count++;
    #####:  336:	}
        -:  337:
    #####:  338:	for (i = 0; i < state->discardCount[player]; i++)
        -:  339:	{
    #####:  340:		if (state->discard[player][i] == card) count++;
    #####:  341:	}
        -:  342:
    #####:  343:	return count;
        -:  344:}
        -:  345:
        -:  346:int whoseTurn(struct gameState *state) {
     2000:  347:	return state->whoseTurn;
        -:  348:}
        -:  349:
        -:  350:int endTurn(struct gameState *state) {
        -:  351:	int k;
        -:  352:	int i;
    #####:  353:	int currentPlayer = whoseTurn(state);
        -:  354:
        -:  355:	//Discard hand
    #####:  356:	for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:		state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  359:	}
    #####:  360:	state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:	//Code for determining the player
    #####:  363:	if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:		state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  365:	}
        -:  366:	else{
    #####:  367:		state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:	}
        -:  369:
    #####:  370:	state->outpostPlayed = 0;
    #####:  371:	state->phase = 0;
    #####:  372:	state->numActions = 1;
    #####:  373:	state->coins = 0;
    #####:  374:	state->numBuys = 1;
    #####:  375:	state->playedCardCount = 0;
    #####:  376:	state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:	//int k; move to top
        -:  379:	//Next player draws hand
    #####:  380:	for (k = 0; k < 5; k++){
    #####:  381:		drawCard(state->whoseTurn, state);//Draw a card
    #####:  382:	}
        -:  383:
        -:  384:	//Update money
    #####:  385:	updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:	return 0;
        -:  388:}
        -:  389:
        -:  390:int isGameOver(struct gameState *state) {
        -:  391:	int i;
        -:  392:	int j;
        -:  393:
        -:  394:	//if stack of Province cards is empty, the game ends
    #####:  395:	if (state->supplyCount[province] == 0)
        -:  396:	{
    #####:  397:		return 1;
        -:  398:	}
        -:  399:
        -:  400:	//if three supply pile are at 0, the game ends
    #####:  401:	j = 0;
    #####:  402:	for (i = 0; i < 25; i++)
        -:  403:	{
    #####:  404:		if (state->supplyCount[i] == 0)
        -:  405:		{
    #####:  406:			j++;
    #####:  407:		}
    #####:  408:	}
    #####:  409:	if ( j >= 3)
        -:  410:	{
    #####:  411:		return 1;
        -:  412:	}
        -:  413:
    #####:  414:	return 0;
    #####:  415:}
        -:  416:
        -:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:	int i;
    #####:  420:	int score = 0;
        -:  421:	//score from hand
    #####:  422:	for (i = 0; i < state->handCount[player]; i++)
        -:  423:	{
    #####:  424:		if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:		if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:		if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:		if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:		if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:		if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  430:	}
        -:  431:
        -:  432:	//score from discard
    #####:  433:	for (i = 0; i < state->discardCount[player]; i++)
        -:  434:	{
    #####:  435:		if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:		if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:		if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:		if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:		if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:		if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  441:	}
        -:  442:
        -:  443:	//score from deck
    #####:  444:	for (i = 0; i < state->discardCount[player]; i++)
        -:  445:	{
    #####:  446:		if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:		if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:		if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:		if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:		if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:		if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  452:	}
        -:  453:
    #####:  454:	return score;
        -:  455:}
        -:  456:
        -:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:	int i;	
        -:  459:	int j;
        -:  460:	int highScore;
        -:  461:	int currentPlayer;
        -:  462:
        -:  463:	//get score for each player
    #####:  464:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:	{
        -:  466:		//set unused player scores to -9999
    #####:  467:		if (i >= state->numPlayers)
        -:  468:		{
    #####:  469:			players[i] = -9999;
    #####:  470:		}
        -:  471:		else
        -:  472:		{
    #####:  473:			players[i] = scoreFor (i, state);
        -:  474:		}
    #####:  475:	}
        -:  476:
        -:  477:	//find highest score
    #####:  478:	j = 0;
    #####:  479:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:	{
    #####:  481:		if (players[i] > players[j])
        -:  482:		{
    #####:  483:			j = i;
    #####:  484:		}
    #####:  485:	}
    #####:  486:	highScore = players[j];
        -:  487:
        -:  488:	//add 1 to players who had less turns
    #####:  489:	currentPlayer = whoseTurn(state);
    #####:  490:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:	{
    #####:  492:		if ( players[i] == highScore && i > currentPlayer )
        -:  493:		{
    #####:  494:			players[i]++;
    #####:  495:		}
    #####:  496:	}
        -:  497:
        -:  498:	//find new highest score
    #####:  499:	j = 0;
    #####:  500:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:	{
    #####:  502:		if ( players[i] > players[j] )
        -:  503:		{
    #####:  504:			j = i;
    #####:  505:		}
    #####:  506:	}
    #####:  507:	highScore = players[j];
        -:  508:
        -:  509:	//set winners in array to 1 and rest to 0
    #####:  510:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:	{
    #####:  512:		if ( players[i] == highScore )
        -:  513:		{
    #####:  514:			players[i] = 1;
    #####:  515:		}
        -:  516:		else
        -:  517:		{
    #####:  518:			players[i] = 0;
        -:  519:		}
    #####:  520:	}
        -:  521:
    #####:  522:	return 0;
        -:  523:}
        -:  524:
        -:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:	int deckCounter;
     8410:  528:	if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:
        -:  530:		//Step 1 Shuffle the discard pile back into a deck
        -:  531:		int i;
        -:  532:		//Move discard to deck
     4742:  533:		for (i = 0; i < state->discardCount[player];i++){
     1694:  534:			state->deck[player][i] = state->discard[player][i];
     1694:  535:			state->discard[player][i] = -1;
     1694:  536:		}
        -:  537:
      677:  538:		state->deckCount[player] = state->discardCount[player];
      677:  539:		state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:		//Shufffle the deck
      677:  542:		shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:
        -:  544:		if (DEBUG){//Debug statements
        -:  545:			printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:		}
        -:  547:
      677:  548:		state->discardCount[player] = 0;
        -:  549:
        -:  550:		//Step 2 Draw Card
      677:  551:		count = state->handCount[player];//Get current player's hand count
        -:  552:
        -:  553:		if (DEBUG){//Debug statements
        -:  554:			printf("Current hand count: %d\n", count);
        -:  555:		}
        -:  556:
      677:  557:		deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
      677:  559:		if (deckCounter == 0)
      671:  560:			return -1;
        -:  561:
        6:  562:		state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        6:  563:		state->deckCount[player]--;
        6:  564:		state->handCount[player]++;//Increment hand count
        6:  565:	}
        -:  566:
        -:  567:	else{
     7733:  568:		int count = state->handCount[player];//Get current hand count for player
        -:  569:		int deckCounter;
        -:  570:		if (DEBUG){//Debug statements
        -:  571:			printf("Current hand count: %d\n", count);
        -:  572:		}
        -:  573:
     7733:  574:		deckCounter = state->deckCount[player];//Create holder for the deck count
     7733:  575:		state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     7733:  576:		state->deckCount[player]--;
     7733:  577:		state->handCount[player]++;//Increment hand count
        -:  578:	}
        -:  579:
     7739:  580:	return 0;
     8410:  581:}
        -:  582:
        -:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:	switch( cardNumber ) 
        -:  586:	{
        -:  587:		case curse:
    #####:  588:			return 0;
        -:  589:		case estate:
    #####:  590:			return 2;
        -:  591:		case duchy:
    #####:  592:			return 5;
        -:  593:		case province:
    #####:  594:			return 8;
        -:  595:		case copper:
    #####:  596:			return 0;
        -:  597:		case silver:
    #####:  598:			return 3;
        -:  599:		case gold:
    #####:  600:			return 6;
        -:  601:		case adventurer:
    #####:  602:			return 6;
        -:  603:		case council_room:
    #####:  604:			return 5;
        -:  605:		case feast:
    #####:  606:			return 4;
        -:  607:		case gardens:
    #####:  608:			return 4;
        -:  609:		case mine:
    #####:  610:			return 5;
        -:  611:		case remodel:
    #####:  612:			return 4;
        -:  613:		case smithy:
    #####:  614:			return 4;
        -:  615:		case village:
    #####:  616:			return 3;
        -:  617:		case baron:
    #####:  618:			return 4;
        -:  619:		case great_hall:
    #####:  620:			return 3;
        -:  621:		case minion:
    #####:  622:			return 5;
        -:  623:		case steward:
    #####:  624:			return 3;
        -:  625:		case tribute:
    #####:  626:			return 5;
        -:  627:		case ambassador:
    #####:  628:			return 3;
        -:  629:		case cutpurse:
    #####:  630:			return 4;
        -:  631:		case embargo: 
    #####:  632:			return 2;
        -:  633:		case outpost:
    #####:  634:			return 5;
        -:  635:		case salvager:
    #####:  636:			return 4;
        -:  637:		case sea_hag:
    #####:  638:			return 4;
        -:  639:		case treasure_map:
    #####:  640:			return 4;
        -:  641:	}
        -:  642:
    #####:  643:	return -1;
    #####:  644:}
        -:  645:/************************************ REFACTOR FUNCTIONS **************************************/
        -:  646:
        -:  647:int Adventurer(struct gameState *state) {
    #####:  648:	int drawntreasure = 0;
    #####:  649:	int currentPlayer = whoseTurn(state);
        -:  650:	int cardDrawn; 
        -:  651:	int temphand[MAX_HAND];
    #####:  652:	int z = 0; //temphand counter 
        -:  653:
        -:  654:	//bug here
    #####:  655:	while(drawntreasure<5){
    #####:  656:		if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  657:			shuffle(currentPlayer, state);
    #####:  658:		}
    #####:  659:		drawCard(currentPlayer, state);
    #####:  660:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  661:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:  662:			drawntreasure++;
        -:  663:		else{
    #####:  664:			temphand[z]=cardDrawn;
    #####:  665:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  666:			z++;
        -:  667:		}
        -:  668:	}
    #####:  669:	while(z-1>=0){
    #####:  670:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  671:		z=z-1;
        -:  672:	}
    #####:  673:	return 0;
        -:  674:}
        -:  675:
        -:  676:int Smithy(struct gameState *state, int handPos) {
        -:  677:	//+3 Cards
     1000:  678:	int currentPlayer = whoseTurn(state);
        -:  679:
        -:  680:	//bug here 3 -> 5
    12000:  681:	for (int i = 0; i < 5; i++) {
     5000:  682:		drawCard(currentPlayer, state);
     5000:  683:	}
        -:  684:
        -:  685:	//discard card from hand
     1000:  686:	discardCard(handPos, currentPlayer, state, 0);
     1000:  687:	return 0;
        -:  688:}
        -:  689:
        -:  690:int CouncilRoom(struct gameState *state, int handPos){
    #####:  691:	int currentPlayer = whoseTurn(state);
        -:  692:
        -:  693:	//+4 Cards
    #####:  694:	for (int i = 0; i < 4; i++) {
    #####:  695:		drawCard(currentPlayer, state);
    #####:  696:	}
        -:  697:
        -:  698:	//+1 Buy
        -:  699:	//bug here: +3 buys instead of 1 
    #####:  700:	state->numBuys + 3;
        -:  701:
        -:  702:	//Each other player draws a card
    #####:  703:	for (int i = 0; i < state->numPlayers; i++) {
    #####:  704:		if ( i != currentPlayer ) {
    #####:  705:			drawCard(i, state);
    #####:  706:		}
    #####:  707:	}
        -:  708:
        -:  709:	//put played card in played card pile
    #####:  710:	discardCard(handPos, currentPlayer, state, 0);
        -:  711:
    #####:  712:	return 0;
        -:  713:}
        -:  714:
        -:  715:int GreatHall(struct gameState *state, int handPos){
        -:  716:
    #####:  717:	int currentPlayer = whoseTurn(state);
        -:  718:
        -:  719:	//+1 Card
    #####:  720:	drawCard(currentPlayer, state);
        -:  721:
        -:  722:	//+1 Actions
        -:  723:	//Bug here: gives 4 more actions
    #####:  724:	state->numActions + 4;
        -:  725:
        -:  726:	//discard card from hand
    #####:  727:	discardCard(handPos, currentPlayer, state, 0);
    #####:  728:	return 0;
        -:  729:}
        -:  730:
        -:  731:int Minion(struct gameState *state, int handPos, int choice1, int choice2) {
    #####:  732:	int currentPlayer = whoseTurn(state);		
        -:  733:	//+1 action
    #####:  734:	state->numActions++;
        -:  735:
        -:  736:	//discard card from hand
    #####:  737:	discardCard(handPos, currentPlayer, state, 0);
        -:  738:
        -:  739:	//bug here: changed from choice1 to choice2
    #####:  740:	if (choice2)		//+2 coins
        -:  741:	{
    #####:  742:		state->coins = state->coins + 2;
    #####:  743:	}
        -:  744:
    #####:  745:	else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  746:	{
        -:  747:		//discard hand
    #####:  748:		while(numHandCards(state) > 0)
        -:  749:		{
    #####:  750:			discardCard(handPos, currentPlayer, state, 0);
        -:  751:		}
        -:  752:
        -:  753:		//draw 4
    #####:  754:		for (int i = 0; i < 4; i++)
        -:  755:		{
    #####:  756:			drawCard(currentPlayer, state);
    #####:  757:		}
        -:  758:
        -:  759:		//other players discard hand and redraw if hand size > 4
    #####:  760:		for (int i = 0; i < state->numPlayers; i++)
        -:  761:		{
    #####:  762:			if (i != currentPlayer)
        -:  763:			{
    #####:  764:				if ( state->handCount[i] > 4 )
        -:  765:				{
        -:  766:					//discard hand
    #####:  767:					while( state->handCount[i] > 0 )
        -:  768:					{
    #####:  769:						discardCard(handPos, i, state, 0);
        -:  770:					}
        -:  771:
        -:  772:					//draw 4
    #####:  773:					for (int j = 0; j < 4; j++)
        -:  774:					{
    #####:  775:						drawCard(i, state);
    #####:  776:					}
    #####:  777:				}
    #####:  778:			}
    #####:  779:		}
        -:  780:
    #####:  781:	}
    #####:  782:	return 0;
        -:  783:}
        -:  784:
        -:  785:
        -:  786:
        -:  787:
        -:  788:/************************************ END OF REFACTORING *****************************************/
        -:  789:
        -:  790:
        -:  791:
        -:  792:
        -:  793:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  794:{
        -:  795:	int i;
        -:  796:	int j;
        -:  797:	int k;
        -:  798:	int x;
        -:  799:	int index;
     1000:  800:	int currentPlayer = whoseTurn(state);
     1000:  801:	int nextPlayer = currentPlayer + 1;
        -:  802:
     1000:  803:	int tributeRevealedCards[2] = {-1, -1};
        -:  804:	int temphand[MAX_HAND];// moved above the if statement
        -:  805:
        -:  806:	//3 vars below were not used in compilation, so commented out
     1000:  807:	int drawntreasure=0;
        -:  808:	int cardDrawn;
     1000:  809:	int z = 0;// this is the counter for the temp hand
     1000:  810:	if (nextPlayer > (state->numPlayers - 1)){
    #####:  811:		nextPlayer = 0;
    #####:  812:	}
        -:  813:
        -:  814:
        -:  815:	//uses switch to select card and perform actions
     2000:  816:	switch( card ) 
        -:  817:	{		
        -:  818:		//Refactored above
        -:  819:		case adventurer:
    #####:  820:			Adventurer(state);
        -:  821:
        -:  822:			/*
        -:  823:			   while(drawntreasure<2){
        -:  824:			   if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  825:			   shuffle(currentPlayer, state);
        -:  826:			   }
        -:  827:			   drawCard(currentPlayer, state);
        -:  828:			   cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  829:			   if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  830:			   drawntreasure++;
        -:  831:			   else{
        -:  832:			   temphand[z]=cardDrawn;
        -:  833:			   state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  834:			   z++;
        -:  835:			   }
        -:  836:			   }
        -:  837:			   while(z-1>=0){
        -:  838:			   state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  839:			   z=z-1;
        -:  840:			   }
        -:  841:			   return 0;
        -:  842:			  */ 
        -:  843:
        -:  844:		case council_room:
    #####:  845:			CouncilRoom(state, handPos);
        -:  846:			/*
        -:  847:			//+4 Cards
        -:  848:			for (i = 0; i < 4; i++)
        -:  849:			{
        -:  850:			drawCard(currentPlayer, state);
        -:  851:			}
        -:  852:
        -:  853:			//+1 Buy
        -:  854:			state->numBuys++;
        -:  855:
        -:  856:			//Each other player draws a card
        -:  857:			for (i = 0; i < state->numPlayers; i++)
        -:  858:			{
        -:  859:			if ( i != currentPlayer )
        -:  860:			{
        -:  861:			drawCard(i, state);
        -:  862:			}
        -:  863:			}
        -:  864:
        -:  865:			//put played card in played card pile
        -:  866:			discardCard(handPos, currentPlayer, state, 0);
        -:  867:
        -:  868:			return 0;
        -:  869:			*/
        -:  870:
        -:  871:		case feast:
        -:  872:			//gain card with cost up to 5
        -:  873:			//Backup hand
    #####:  874:			for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  875:				temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  876:				state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  877:			}
        -:  878:			//Backup hand
        -:  879:
        -:  880:			//Update Coins for Buy
    #####:  881:			updateCoins(currentPlayer, state, 5);
    #####:  882:			x = 1;//Condition to loop on
    #####:  883:			while( x == 1) {//Buy one card
    #####:  884:				if (supplyCount(choice1, state) <= 0){
        -:  885:					if (DEBUG)
        -:  886:						printf("None of that card left, sorry!\n");
        -:  887:
        -:  888:					if (DEBUG){
        -:  889:						printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  890:					}
    #####:  891:				}
    #####:  892:				else if (state->coins < getCost(choice1)){
    #####:  893:					printf("That card is too expensive!\n");
        -:  894:
        -:  895:					if (DEBUG){
        -:  896:						printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  897:					}
    #####:  898:				}
        -:  899:				else{
        -:  900:
        -:  901:					if (DEBUG){
        -:  902:						printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  903:					}
        -:  904:
    #####:  905:					gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  906:					x = 0;//No more buying cards
        -:  907:
        -:  908:					if (DEBUG){
        -:  909:						printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  910:					}
        -:  911:
        -:  912:				}
        -:  913:			}     
        -:  914:
        -:  915:			//Reset Hand
    #####:  916:			for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  917:				state->hand[currentPlayer][i] = temphand[i];
    #####:  918:				temphand[i] = -1;
    #####:  919:			}
        -:  920:			//Reset Hand
        -:  921:
    #####:  922:			return 0;
        -:  923:
        -:  924:		case gardens:
    #####:  925:			return -1;
        -:  926:
        -:  927:		case mine:
    #####:  928:			j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  929:
    #####:  930:			if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  931:			{
    #####:  932:				return -1;
        -:  933:			}
        -:  934:
    #####:  935:			if (choice2 > treasure_map || choice2 < curse)
        -:  936:			{
    #####:  937:				return -1;
        -:  938:			}
        -:  939:
    #####:  940:			if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  941:			{
    #####:  942:				return -1;
        -:  943:			}
        -:  944:
    #####:  945:			gainCard(choice2, state, 2, currentPlayer);
        -:  946:
        -:  947:			//discard card from hand
    #####:  948:			discardCard(handPos, currentPlayer, state, 0);
        -:  949:
        -:  950:			//discard trashed card
    #####:  951:			for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  952:			{
    #####:  953:				if (state->hand[currentPlayer][i] == j)
        -:  954:				{
    #####:  955:					discardCard(i, currentPlayer, state, 0);			
    #####:  956:					break;
        -:  957:				}
    #####:  958:			}
        -:  959:
    #####:  960:			return 0;
        -:  961:
        -:  962:		case remodel:
    #####:  963:			j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  964:
    #####:  965:			if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  966:			{
    #####:  967:				return -1;
        -:  968:			}
        -:  969:
    #####:  970:			gainCard(choice2, state, 0, currentPlayer);
        -:  971:
        -:  972:			//discard card from hand
    #####:  973:			discardCard(handPos, currentPlayer, state, 0);
        -:  974:
        -:  975:			//discard trashed card
    #####:  976:			for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  977:			{
    #####:  978:				if (state->hand[currentPlayer][i] == j)
        -:  979:				{
    #####:  980:					discardCard(i, currentPlayer, state, 0);			
    #####:  981:					break;
        -:  982:				}
    #####:  983:			}
        -:  984:
        -:  985:
    #####:  986:			return 0;
        -:  987:
        -:  988:		case smithy:
     1000:  989:			Smithy(state, handPos); 
        -:  990:			
        -:  991:			/*
        -:  992:			//+3 Cards
        -:  993:			for (i = 0; i < 3; i++)
        -:  994:			{
        -:  995:			drawCard(currentPlayer, state);
        -:  996:			}
        -:  997:
        -:  998:			//discard card from hand
        -:  999:			discardCard(handPos, currentPlayer, state, 0);
        -: 1000:			return 0;
        -: 1001:			*/
        -: 1002:
        -: 1003:		case village:
        -: 1004:			//+1 Card
     1000: 1005:			drawCard(currentPlayer, state);
        -: 1006:
        -: 1007:			//+2 Actions
     1000: 1008:			state->numActions = state->numActions + 2;
        -: 1009:
        -: 1010:			//discard played card from hand
     1000: 1011:			discardCard(handPos, currentPlayer, state, 0);
     1000: 1012:			return 0;
        -: 1013:
        -: 1014:		case baron:
    #####: 1015:			state->numBuys++;//Increase buys by 1!
    #####: 1016:			if (choice1 > 0){//Boolean true or going to discard an estate
    #####: 1017:				int p = 0;//Iterator for hand!
    #####: 1018:				int card_not_discarded = 1;//Flag for discard set!
    #####: 1019:				while(card_not_discarded){
    #####: 1020:					if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####: 1021:						state->coins += 4;//Add 4 coins to the amount of coins
    #####: 1022:						state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1023:						state->discardCount[currentPlayer]++;
    #####: 1024:						for (;p < state->handCount[currentPlayer]; p++){
    #####: 1025:							state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####: 1026:						}
    #####: 1027:						state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1028:						state->handCount[currentPlayer]--;
    #####: 1029:						card_not_discarded = 0;//Exit the loop
    #####: 1030:					}
    #####: 1031:					else if (p > state->handCount[currentPlayer]){
        -: 1032:						if(DEBUG) {
        -: 1033:							printf("No estate cards in your hand, invalid choice\n");
        -: 1034:							printf("Must gain an estate if there are any\n");
        -: 1035:						}
    #####: 1036:						if (supplyCount(estate, state) > 0){
    #####: 1037:							gainCard(estate, state, 0, currentPlayer);
    #####: 1038:							state->supplyCount[estate]--;//Decrement estates
    #####: 1039:							if (supplyCount(estate, state) == 0){
    #####: 1040:								isGameOver(state);
    #####: 1041:							}
    #####: 1042:						}
    #####: 1043:						card_not_discarded = 0;//Exit the loop
    #####: 1044:					}
        -: 1045:
        -: 1046:					else{
    #####: 1047:						p++;//Next card
        -: 1048:					}
        -: 1049:				}
    #####: 1050:			}
        -: 1051:
        -: 1052:			else{
    #####: 1053:				if (supplyCount(estate, state) > 0){
    #####: 1054:					gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####: 1055:					state->supplyCount[estate]--;//Decrement Estates
    #####: 1056:					if (supplyCount(estate, state) == 0){
    #####: 1057:						isGameOver(state);
    #####: 1058:					}
    #####: 1059:				}
        -: 1060:			}
        -: 1061:
        -: 1062:
    #####: 1063:			return 0;
        -: 1064:
        -: 1065:		case great_hall:
    #####: 1066:			GreatHall(state, handPos);
        -: 1067:			/*
        -: 1068:			//+1 Card
        -: 1069:			drawCard(currentPlayer, state);
        -: 1070:
        -: 1071:			//+1 Actions
        -: 1072:			state->numActions++;
        -: 1073:
        -: 1074:			//discard card from hand
        -: 1075:			discardCard(handPos, currentPlayer, state, 0);
        -: 1076:			return 0;
        -: 1077:			*/
        -: 1078:
        -: 1079:		case minion:
    #####: 1080:			Minion(state, handPos, choice1, choice2);
        -: 1081:			/*
        -: 1082:			//+1 action
        -: 1083:			state->numActions++;
        -: 1084:
        -: 1085:			//discard card from hand
        -: 1086:			discardCard(handPos, currentPlayer, state, 0);
        -: 1087:
        -: 1088:			if (choice1)		//+2 coins
        -: 1089:			{
        -: 1090:			state->coins = state->coins + 2;
        -: 1091:			}
        -: 1092:
        -: 1093:			else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1094:			{
        -: 1095:			//discard hand
        -: 1096:			while(numHandCards(state) > 0)
        -: 1097:			{
        -: 1098:			discardCard(handPos, currentPlayer, state, 0);
        -: 1099:			}
        -: 1100:
        -: 1101:			//draw 4
        -: 1102:			for (i = 0; i < 4; i++)
        -: 1103:			{
        -: 1104:			drawCard(currentPlayer, state);
        -: 1105:			}
        -: 1106:
        -: 1107:			//other players discard hand and redraw if hand size > 4
        -: 1108:			for (i = 0; i < state->numPlayers; i++)
        -: 1109:			{
        -: 1110:			if (i != currentPlayer)
        -: 1111:			{
        -: 1112:			if ( state->handCount[i] > 4 )
        -: 1113:			{
        -: 1114:			//discard hand
        -: 1115:			while( state->handCount[i] > 0 )
        -: 1116:			{
        -: 1117:			discardCard(handPos, i, state, 0);
        -: 1118:			}
        -: 1119:
        -: 1120:			//draw 4
        -: 1121:			for (j = 0; j < 4; j++)
        -: 1122:			{
        -: 1123:			drawCard(i, state);
        -: 1124:			}
        -: 1125:			}
        -: 1126:			}
        -: 1127:			}
        -: 1128:
        -: 1129:			}
        -: 1130:			return 0;
        -: 1131:			*/
        -: 1132:
        -: 1133:		case steward:
    #####: 1134:			if (choice1 == 1)
        -: 1135:			{
        -: 1136:				//+2 cards
    #####: 1137:				drawCard(currentPlayer, state);
    #####: 1138:				drawCard(currentPlayer, state);
    #####: 1139:			}
    #####: 1140:			else if (choice1 == 2)
        -: 1141:			{
        -: 1142:				//+2 coins
    #####: 1143:				state->coins = state->coins + 2;
    #####: 1144:			}
        -: 1145:			else
        -: 1146:			{
        -: 1147:				//trash 2 cards in hand
    #####: 1148:				discardCard(choice2, currentPlayer, state, 1);
    #####: 1149:				discardCard(choice3, currentPlayer, state, 1);
        -: 1150:			}
        -: 1151:
        -: 1152:			//discard card from hand
    #####: 1153:			discardCard(handPos, currentPlayer, state, 0);
    #####: 1154:			return 0;
        -: 1155:
        -: 1156:		case tribute:
    #####: 1157:			if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1158:				if (state->deckCount[nextPlayer] > 0){
    #####: 1159:					tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1160:					state->deckCount[nextPlayer]--;
    #####: 1161:				}
    #####: 1162:				else if (state->discardCount[nextPlayer] > 0){
    #####: 1163:					tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1164:					state->discardCount[nextPlayer]--;
    #####: 1165:				}
        -: 1166:				else{
        -: 1167:					//No Card to Reveal
        -: 1168:					if (DEBUG){
        -: 1169:						printf("No cards to reveal\n");
        -: 1170:					}
        -: 1171:				}
    #####: 1172:			}
        -: 1173:
        -: 1174:			else{
    #####: 1175:				if (state->deckCount[nextPlayer] == 0){
    #####: 1176:					for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1177:						state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1178:						state->deckCount[nextPlayer]++;
    #####: 1179:						state->discard[nextPlayer][i] = -1;
    #####: 1180:						state->discardCount[nextPlayer]--;
    #####: 1181:					}
        -: 1182:
    #####: 1183:					shuffle(nextPlayer,state);//Shuffle the deck
    #####: 1184:				} 
    #####: 1185:				tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1186:				state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1187:				state->deckCount[nextPlayer]--;
    #####: 1188:				tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1189:				state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1190:				state->deckCount[nextPlayer]--;
        -: 1191:			}    
        -: 1192:
    #####: 1193:			if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1194:				state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1195:				state->playedCardCount++;
    #####: 1196:				tributeRevealedCards[1] = -1;
    #####: 1197:			}
        -: 1198:
    #####: 1199:			for (i = 0; i <= 2; i ++){
    #####: 1200:				if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1201:					state->coins += 2;
    #####: 1202:				}
        -: 1203:
    #####: 1204:				else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1205:					drawCard(currentPlayer, state);
    #####: 1206:					drawCard(currentPlayer, state);
    #####: 1207:				}
        -: 1208:				else{//Action Card
    #####: 1209:					state->numActions = state->numActions + 2;
        -: 1210:				}
    #####: 1211:			}
        -: 1212:
    #####: 1213:			return 0;
        -: 1214:
        -: 1215:		case ambassador:
    #####: 1216:			j = 0;		//used to check if player has enough cards to discard
        -: 1217:
    #####: 1218:			if (choice2 > 2 || choice2 < 0)
        -: 1219:			{
    #####: 1220:				return -1;				
        -: 1221:			}
        -: 1222:
    #####: 1223:			if (choice1 == handPos)
        -: 1224:			{
    #####: 1225:				return -1;
        -: 1226:			}
        -: 1227:
    #####: 1228:			for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1229:			{
    #####: 1230:				if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1231:				{
    #####: 1232:					j++;
    #####: 1233:				}
    #####: 1234:			}
    #####: 1235:			if (j < choice2)
        -: 1236:			{
    #####: 1237:				return -1;				
        -: 1238:			}
        -: 1239:
        -: 1240:			if (DEBUG) 
        -: 1241:				printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1242:
        -: 1243:			//increase supply count for choosen card by amount being discarded
    #####: 1244:			state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1245:
        -: 1246:			//each other player gains a copy of revealed card
    #####: 1247:			for (i = 0; i < state->numPlayers; i++)
        -: 1248:			{
    #####: 1249:				if (i != currentPlayer)
        -: 1250:				{
    #####: 1251:					gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1252:				}
    #####: 1253:			}
        -: 1254:
        -: 1255:			//discard played card from hand
    #####: 1256:			discardCard(handPos, currentPlayer, state, 0);			
        -: 1257:
        -: 1258:			//trash copies of cards returned to supply
    #####: 1259:			for (j = 0; j < choice2; j++)
        -: 1260:			{
    #####: 1261:				for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1262:				{
    #####: 1263:					if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1264:					{
    #####: 1265:						discardCard(i, currentPlayer, state, 1);
    #####: 1266:						break;
        -: 1267:					}
    #####: 1268:				}
    #####: 1269:			}			
        -: 1270:
    #####: 1271:			return 0;
        -: 1272:
        -: 1273:		case cutpurse:
        -: 1274:
    #####: 1275:			updateCoins(currentPlayer, state, 2);
    #####: 1276:			for (i = 0; i < state->numPlayers; i++)
        -: 1277:			{
    #####: 1278:				if (i != currentPlayer)
        -: 1279:				{
    #####: 1280:					for (j = 0; j < state->handCount[i]; j++)
        -: 1281:					{
    #####: 1282:						if (state->hand[i][j] == copper)
        -: 1283:						{
    #####: 1284:							discardCard(j, i, state, 0);
    #####: 1285:							break;
        -: 1286:						}
    #####: 1287:						if (j == state->handCount[i])
        -: 1288:						{
    #####: 1289:							for (k = 0; k < state->handCount[i]; k++)
        -: 1290:							{
        -: 1291:								if (DEBUG)
        -: 1292:									printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1293:							}	
    #####: 1294:							break;
        -: 1295:						}		
    #####: 1296:					}
        -: 1297:
    #####: 1298:				}
        -: 1299:
    #####: 1300:			}				
        -: 1301:
        -: 1302:			//discard played card from hand
    #####: 1303:			discardCard(handPos, currentPlayer, state, 0);			
        -: 1304:
    #####: 1305:			return 0;
        -: 1306:
        -: 1307:
        -: 1308:		case embargo: 
        -: 1309:			//+2 Coins
    #####: 1310:			state->coins = state->coins + 2;
        -: 1311:
        -: 1312:			//see if selected pile is in play
    #####: 1313:			if ( state->supplyCount[choice1] == -1 )
        -: 1314:			{
    #####: 1315:				return -1;
        -: 1316:			}
        -: 1317:
        -: 1318:			//add embargo token to selected supply pile
    #####: 1319:			state->embargoTokens[choice1]++;
        -: 1320:
        -: 1321:			//trash card
    #####: 1322:			discardCard(handPos, currentPlayer, state, 1);		
    #####: 1323:			return 0;
        -: 1324:
        -: 1325:		case outpost:
        -: 1326:			//set outpost flag
    #####: 1327:			state->outpostPlayed++;
        -: 1328:
        -: 1329:			//discard card
    #####: 1330:			discardCard(handPos, currentPlayer, state, 0);
    #####: 1331:			return 0;
        -: 1332:
        -: 1333:		case salvager:
        -: 1334:			//+1 buy
    #####: 1335:			state->numBuys++;
        -: 1336:
    #####: 1337:			if (choice1)
        -: 1338:			{
        -: 1339:				//gain coins equal to trashed card
    #####: 1340:				state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1341:				//trash card
    #####: 1342:				discardCard(choice1, currentPlayer, state, 1);	
    #####: 1343:			}
        -: 1344:
        -: 1345:			//discard card
    #####: 1346:			discardCard(handPos, currentPlayer, state, 0);
    #####: 1347:			return 0;
        -: 1348:
        -: 1349:		case sea_hag:
    #####: 1350:			for (i = 0; i < state->numPlayers; i++){
    #####: 1351:				if (i != currentPlayer){
    #####: 1352:					state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1353:					state->discardCount[i]++;
    #####: 1354:					state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1355:				}
    #####: 1356:			}
    #####: 1357:			return 0;
        -: 1358:
        -: 1359:		case treasure_map:
        -: 1360:			//search hand for another treasure_map
    #####: 1361:			index = -1;
    #####: 1362:			for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1363:			{
    #####: 1364:				if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1365:				{
    #####: 1366:					index = i;
    #####: 1367:					break;
        -: 1368:				}
    #####: 1369:			}
    #####: 1370:			if (index > -1)
        -: 1371:			{
        -: 1372:				//trash both treasure cards
    #####: 1373:				discardCard(handPos, currentPlayer, state, 1);
    #####: 1374:				discardCard(index, currentPlayer, state, 1);
        -: 1375:
        -: 1376:				//gain 4 Gold cards
    #####: 1377:				for (i = 0; i < 4; i++)
        -: 1378:				{
    #####: 1379:					gainCard(gold, state, 1, currentPlayer);
    #####: 1380:				}
        -: 1381:
        -: 1382:				//return success
    #####: 1383:				return 1;
        -: 1384:			}
        -: 1385:
        -: 1386:			//no second treasure_map found in hand
    #####: 1387:			return -1;
        -: 1388:	}
        -: 1389:
    #####: 1390:	return -1;
     1000: 1391:}
        -: 1392:
        -: 1393:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1394:{
        -: 1395:
        -: 1396:	//if card is not trashed, added to Played pile 
     2000: 1397:	if (trashFlag < 1)
        -: 1398:	{
        -: 1399:		//add card to played pile
     2000: 1400:		state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
     2000: 1401:		state->playedCardCount++;
     2000: 1402:	}
        -: 1403:
        -: 1404:	//set played card to -1
     2000: 1405:	state->hand[currentPlayer][handPos] = -1;
        -: 1406:
        -: 1407:	//remove card from player's hand
     2000: 1408:	if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1409:	{
        -: 1410:		//reduce number of cards in hand
    #####: 1411:		state->handCount[currentPlayer]--;
    #####: 1412:	}
     2000: 1413:	else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1414:	{
        -: 1415:		//reduce number of cards in hand
    #####: 1416:		state->handCount[currentPlayer]--;
    #####: 1417:	}
        -: 1418:	else 	
        -: 1419:	{
        -: 1420:		//replace discarded card with last card in hand
     2000: 1421:		state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1422:		//set last card to -1
     2000: 1423:		state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1424:		//reduce number of cards in hand
     2000: 1425:		state->handCount[currentPlayer]--;
        -: 1426:	}
        -: 1427:
     2000: 1428:	return 0;
        -: 1429:}
        -: 1430:
        -: 1431:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1432:{
        -: 1433:	//Note: supplyPos is enum of choosen card
        -: 1434:
        -: 1435:	//check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1436:	if ( supplyCount(supplyPos, state) < 1 )
        -: 1437:	{
    #####: 1438:		return -1;
        -: 1439:	}
        -: 1440:
        -: 1441:	//added card for [whoseTurn] current player:
        -: 1442:	// toFlag = 0 : add to discard
        -: 1443:	// toFlag = 1 : add to deck
        -: 1444:	// toFlag = 2 : add to hand
        -: 1445:
    #####: 1446:	if (toFlag == 1)
        -: 1447:	{
    #####: 1448:		state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1449:		state->deckCount[player]++;
    #####: 1450:	}
    #####: 1451:	else if (toFlag == 2)
        -: 1452:	{
    #####: 1453:		state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1454:		state->handCount[player]++;
    #####: 1455:	}
        -: 1456:	else
        -: 1457:	{
    #####: 1458:		state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1459:		state->discardCount[player]++;
        -: 1460:	}
        -: 1461:
        -: 1462:	//decrease number in supply pile
    #####: 1463:	state->supplyCount[supplyPos]--;
        -: 1464:
    #####: 1465:	return 0;
    #####: 1466:}
        -: 1467:
        -: 1468:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1469:{
        -: 1470:	int i;
        -: 1471:
        -: 1472:	//reset coin count
      482: 1473:	state->coins = 0;
        -: 1474:
        -: 1475:	//add coins for each Treasure card in player's hand
     5784: 1476:	for (i = 0; i < state->handCount[player]; i++)
        -: 1477:	{
     2410: 1478:		if (state->hand[player][i] == copper)
        -: 1479:		{
     1685: 1480:			state->coins += 1;
     1685: 1481:		}
      725: 1482:		else if (state->hand[player][i] == silver)
        -: 1483:		{
    #####: 1484:			state->coins += 2;
    #####: 1485:		}
      725: 1486:		else if (state->hand[player][i] == gold)
        -: 1487:		{
    #####: 1488:			state->coins += 3;
    #####: 1489:		}	
     2410: 1490:	}	
        -: 1491:
        -: 1492:	//add bonus
      482: 1493:	state->coins += bonus;
        -: 1494:
      482: 1495:	return 0;
        -: 1496:}
        -: 1497:
        -: 1498:
        -: 1499://end of dominion.c
        -: 1500:
